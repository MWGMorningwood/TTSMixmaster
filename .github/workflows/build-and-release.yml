name: Build and Release TTSMixmaster

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub Release'
        required: true
        type: boolean
        default: true

env:
  PYTHON_VERSION: "3.11"
  PROJECT_NAME: "TTSMixmaster"

jobs:
  build:
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      artifacts: ${{ steps.artifacts.outputs.artifacts }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = $env:GITHUB_REF_NAME
        }
        $version = $version -replace '^v', ''
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      shell: pwsh
    
    - name: Update version in pyproject.toml
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $content = Get-Content pyproject.toml -Raw
        $content = $content -replace 'version = "[^"]*"', "version = `"$version`""
        Set-Content pyproject.toml -Value $content
        echo "Updated version to $version in pyproject.toml"
      shell: pwsh
    - name: Create version file
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $content = "__version__ = `"$version`""
        New-Item -Path "src" -ItemType Directory -Force
        Set-Content -Path "src/__version__.py" -Value $content -Encoding utf8
      shell: pwsh
    
    - name: Build with PyInstaller
      run: |
        pyinstaller main.py --name 'TTSMixmaster' --clean --noconfirm
        if (-not (Test-Path "dist\TTSMixmaster\TTSMixmaster.exe")) {
          throw "Build failed - executable not found"
        }
        echo "Build completed successfully"
      shell: pwsh
    
    - name: Verify build
      run: |
        $exePath = "dist\TTSMixmaster\TTSMixmaster.exe"
        if (Test-Path $exePath) {
          $fileInfo = Get-Item $exePath
          echo "Executable size: $($fileInfo.Length) bytes"
          echo "Executable created: $($fileInfo.CreationTime)"
        } else {
          throw "Executable not found at $exePath"
        }
      shell: pwsh
    
    - name: Sign executable with Azure Trusted Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: ${{ secrets.AZURE_TRUSTED_SIGNING_ENDPOINT }}
        trusted-signing-account-name: ${{ secrets.AZURE_TRUSTED_SIGNING_ACCOUNT }}
        certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
        files-folder: dist\TTSMixmaster
        files-folder-filter: exe
        files-folder-recurse: false
        files-folder-depth: 1
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
    
    - name: Install WiX Toolset
      run: |
        # Install WiX Toolset v4 as a .NET global tool
        dotnet tool install --global wix --version 4.0.5
        
        # Verify installation and show version
        wix --version
        echo "WiX Toolset installed successfully"
      shell: pwsh
    
    - name: Create WiX source file
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        
        # Convert version to 4-part format required by WiX v4
        $versionParts = $version.Split('.')
        if ($versionParts.Length -eq 3) {
          $wixVersion = "$version.0"
        } elseif ($versionParts.Length -eq 2) {
          $wixVersion = "$version.0.0"
        } elseif ($versionParts.Length -eq 1) {
          $wixVersion = "$version.0.0.0"
        } else {
          $wixVersion = $version
        }
        
        echo "Converting version '$version' to WiX format: '$wixVersion'"
        
        # Create WiX file content using WiX v4 syntax
        $lines = @(
          '<?xml version="1.0" encoding="UTF-8"?>',
          '<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">',
          '  <Package Name="TTSMixmaster" Language="1033" Version="' + $wixVersion + '" Manufacturer="TTSMixmaster" UpgradeCode="A1B2C3D4-E5F6-7890-ABCD-EF1234567890">',
          '    <MajorUpgrade DowngradeErrorMessage="A newer version is already installed." />',
          '    <MediaTemplate EmbedCab="yes" />',
          '    <Feature Id="ProductFeature" Title="TTSMixmaster" Level="1">',
          '      <ComponentGroupRef Id="ProductComponents" />',
          '    </Feature>',
          '  </Package>',
          '  <Fragment>',
          '    <StandardDirectory Id="ProgramFilesFolder">',
          '      <Directory Id="INSTALLFOLDER" Name="TTSMixmaster" />',
          '    </StandardDirectory>',
          '    <StandardDirectory Id="ProgramMenuFolder">',
          '      <Directory Id="ApplicationProgramsFolder" Name="TTSMixmaster"/>',
          '    </StandardDirectory>',
          '  </Fragment>',
          '  <Fragment>',
          '    <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">',
          '      <Component Id="MainExecutable" Guid="*">',
          '        <File Id="TTSMixmasterExe" Source="dist\TTSMixmaster\TTSMixmaster.exe" KeyPath="yes" />',
          '        <Shortcut Id="StartMenuShortcut" Name="TTSMixmaster" Target="[INSTALLFOLDER]TTSMixmaster.exe" Directory="ApplicationProgramsFolder"/>',
          '        <Shortcut Id="DesktopShortcut" Name="TTSMixmaster" Target="[DesktopFolder]TTSMixmaster.exe" />',
          '        <RemoveFolder Id="RemoveProgramsFolder" Directory="ApplicationProgramsFolder" On="uninstall"/>',
          '        <RegistryValue Root="HKCU" Key="Software\TTSMixmaster" Name="Installed" Type="string" Value="yes" KeyPath="no"/>',
          '      </Component>',
          '    </ComponentGroup>',
          '  </Fragment>',
          '</Wix>'
        )
        )
        
        try {
          $lines | Out-File -FilePath "TTSMixmaster.wxs" -Encoding UTF8
          echo "WiX source file created successfully with version: $wixVersion"
          
          # Verify the file was created and show first few lines
          if (Test-Path "TTSMixmaster.wxs") {
            $fileSize = (Get-Item "TTSMixmaster.wxs").Length
            echo "WiX file size: $fileSize bytes"
            
            # Show the version line for debugging
            $content = Get-Content "TTSMixmaster.wxs"
            $versionLine = $content | Where-Object { $_ -match "Version=" }
            echo "Version line in WiX file: $versionLine"
          } else {
            throw "WiX source file creation failed"
          }
        } catch {
          echo "Error creating WiX source file: $_"
          throw "WiX source file creation failed"
        }
      shell: pwsh
    
    - name: Build MSI with WiX
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        
        # Show the WiX file content for debugging
        echo "=== WiX Source File Content ==="
        Get-Content "TTSMixmaster.wxs" | Select-Object -First 10
        echo "=============================="
        
        # Build the MSI with error handling
        try {
          echo "Building MSI with WiX..."
          wix build TTSMixmaster.wxs -out "dist\TTSMixmaster-v$version-Setup.msi" -arch x64 -v
        } catch {
          echo "WiX build failed with error: $_"
          echo "=== Full WiX File Content ==="
          Get-Content "TTSMixmaster.wxs"
          echo "=============================="
          throw "MSI creation failed: $_"
        }
        
        # Verify MSI was created
        if (Test-Path "dist\TTSMixmaster-v$version-Setup.msi") {
          $msiInfo = Get-Item "dist\TTSMixmaster-v$version-Setup.msi"
          echo "MSI created successfully: $($msiInfo.Name)"
          echo "MSI size: $($msiInfo.Length) bytes"
          echo "msi_path=dist\TTSMixmaster-v$version-Setup.msi" >> $env:GITHUB_OUTPUT
          echo "msi_name=TTSMixmaster-v$version-Setup.msi" >> $env:GITHUB_OUTPUT
        } else {
          echo "MSI file not found. Listing dist directory contents:"
          Get-ChildItem "dist" -Recurse
          throw "MSI creation failed - file not found"
        }
      shell: pwsh
      id: create_msi
    
    - name: Sign MSI with Azure Trusted Signing
      uses: azure/trusted-signing-action@v0.4.0
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: ${{ secrets.AZURE_TRUSTED_SIGNING_ENDPOINT }}
        trusted-signing-account-name: ${{ secrets.AZURE_TRUSTED_SIGNING_ACCOUNT }}
        certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
        files-folder: dist
        files-folder-filter: msi
        files-folder-recurse: false
        files-folder-depth: 1
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
    
    - name: Create ZIP archive
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipName = "TTSMixmaster-v$version-Portable.zip"
        Compress-Archive -Path "dist\TTSMixmaster\*" -DestinationPath "dist\$zipName"
        echo "zip_path=dist\$zipName" >> $env:GITHUB_OUTPUT
        echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT
      shell: pwsh
      id: create_zip
    
    - name: Set artifacts output
      id: artifacts
      run: |
        $zip = "${{ steps.create_zip.outputs.zip_path }}"
        $msi = "${{ steps.create_msi.outputs.msi_path }}"
        
        $artifacts = @{
          zip_path = $zip
          zip_name = "${{ steps.create_zip.outputs.zip_name }}"
          msi_path = $msi
          msi_name = "${{ steps.create_msi.outputs.msi_name }}"
        } | ConvertTo-Json -Compress
        
        echo "artifacts=$artifacts" >> $env:GITHUB_OUTPUT
      shell: pwsh
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TTSMixmaster-Build-v${{ steps.get_version.outputs.version }}
        path: |
          dist/TTSMixmaster-v*-Setup.msi
          dist/TTSMixmaster-v*-Portable.zip
          dist/TTSMixmaster/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: TTSMixmaster-Build-v${{ needs.build.outputs.version }}
        path: ./artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="v${{ needs.build.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$VERSION$" | head -n1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
        
        # Generate changelog
        CHANGELOG=$(cat << 'EOF'
        ## What's Changed
        
        EOF
        )
        
        # Get commits since last tag
        COMMITS=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
        
        if [ -n "$COMMITS" ]; then
          CHANGELOG="$CHANGELOG
        
        ### Commits:
        $COMMITS"
        else
          CHANGELOG="$CHANGELOG
        
        * Initial release"
        fi
        
        # Add build information
        CHANGELOG="$CHANGELOG
        
        ## Downloads
        
        - **TTSMixmaster-v${{ needs.build.outputs.version }}-Setup.msi** - Windows installer (recommended)
        - **TTSMixmaster-v${{ needs.build.outputs.version }}-Portable.zip** - Portable version
        
        ## Installation
        
        ### Windows Installer (MSI)
        1. Download the \`.msi\` installer
        2. Run the installer
        3. Follow the installation wizard
        4. Launch TTSMixmaster from the Start Menu or Desktop shortcut
        
        ### Portable Version
        1. Download the \`.zip\` file
        2. Extract to a folder of your choice
        3. Run \`TTSMixmaster.exe\`
        
        ## System Requirements
        
        - Windows 10 or later (64-bit)
        - 100MB free disk space
        - Internet connection for Last.fm integration
        
        ## Notes
        
        - Both the MSI installer and portable executable are digitally signed with Azure Trusted Signing
        - The MSI installer creates Start Menu and Desktop shortcuts automatically
        - First-time users should check the [documentation](https://github.com/${{ github.repository }}/tree/main/docs) for setup instructions
        - Report issues on the [GitHub Issues](https://github.com/${{ github.repository }}/issues) page"
        
        # Save changelog to file and output
        echo "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: TTSMixmaster v${{ needs.build.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        files: |
          ./artifacts/TTSMixmaster-v*-Setup.msi
          ./artifacts/TTSMixmaster-v*-Portable.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update latest release info
      run: |
        echo "✅ Release v${{ needs.build.outputs.version }} created successfully!"
        echo "🔗 View release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }}"
